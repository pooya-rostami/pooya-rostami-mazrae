"use strict";(self.webpackChunkpooya_rostami_mazrae=self.webpackChunkpooya_rostami_mazrae||[]).push([[1],{7942:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"tutorials/middleware_in_api","title":"Middleware In API Design","description":"Middleware is a foundational concept in designing robust APIs. It provides a structured way to process requests and responses, allowing for modular and maintainable logic such as authentication, validation, logging, and more.","source":"@site/docs/tutorials/4_middleware_in_api.md","sourceDirName":"tutorials","slug":"/tutorials/middleware_in_api","permalink":"/docs/tutorials/middleware_in_api","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"Middleware In API Design"},"sidebar":"tutorialSidebar","previous":{"title":"Restful API","permalink":"/docs/tutorials/restful_api"},"next":{"title":"JWT","permalink":"/docs/tutorials/jwt"}}');var i=r(4848),t=r(8453);const a={sidebar_position:5,title:"Middleware In API Design"},d="Middleware in API Design",o={},l=[{value:"What is Middleware?",id:"what-is-middleware",level:2},{value:"Why should we use Middleware?",id:"why-should-we-use-middleware",level:2},{value:"Common use cases of Middleware",id:"common-use-cases-of-middleware",level:2},{value:"1. Authentication and Authorization",id:"1-authentication-and-authorization",level:3},{value:"2. Logging",id:"2-logging",level:3},{value:"3. Input Validation",id:"3-input-validation",level:3},{value:"4. Error Handling",id:"4-error-handling",level:3},{value:"5. CORS Handling",id:"5-cors-handling",level:3},{value:"6. Rate Limiting",id:"6-rate-limiting",level:3},{value:"Best Practices for Middleware",id:"best-practices-for-middleware",level:2},{value:"Summary table of different type of Middleware use cases",id:"summary-table-of-different-type-of-middleware-use-cases",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"middleware-in-api-design",children:"Middleware in API Design"})}),"\n",(0,i.jsx)(n.p,{children:"Middleware is a foundational concept in designing robust APIs. It provides a structured way to process requests and responses, allowing for modular and maintainable logic such as authentication, validation, logging, and more."}),"\n",(0,i.jsx)(n.p,{children:"This document provides an overview of middleware, its common use cases, and how to implement it using TypeScript (Express), along with best practices and examples."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"what-is-middleware",children:"What is Middleware?"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Middleware"})," is a function that executes during the ",(0,i.jsx)(n.strong,{children:"request-response cycle"})," in a web server. Middleware functions can:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Inspect and modify the ",(0,i.jsx)(n.strong,{children:"request"})," and ",(0,i.jsx)(n.strong,{children:"response"})," objects."]}),"\n",(0,i.jsxs)(n.li,{children:["Perform operations like ",(0,i.jsx)(n.strong,{children:"logging"}),", ",(0,i.jsx)(n.strong,{children:"authentication"}),", or ",(0,i.jsx)(n.strong,{children:"validation"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"End"})," the request-response cycle early."]}),"\n",(0,i.jsxs)(n.li,{children:["Pass control to the ",(0,i.jsx)(n.strong,{children:"next"})," middleware using ",(0,i.jsx)(n.code,{children:"next()"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Frameworks like ",(0,i.jsx)(n.strong,{children:"Express.js"}),", ",(0,i.jsx)(n.strong,{children:"Flask"}),", ",(0,i.jsx)(n.strong,{children:"Django"}),", and ",(0,i.jsx)(n.strong,{children:"ASP.NET"})," make extensive use of middleware."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"why-should-we-use-middleware",children:"Why should we use Middleware?"}),"\n",(0,i.jsx)(n.p,{children:"Middleware helps you:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Separate concerns."}),"\n",(0,i.jsx)(n.li,{children:"Keep code clean and reusable."}),"\n",(0,i.jsx)(n.li,{children:"Handle cross-cutting concerns like logging, security, etc."}),"\n",(0,i.jsx)(n.li,{children:"Build scalable API architectures."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"common-use-cases-of-middleware",children:"Common use cases of Middleware"}),"\n",(0,i.jsx)(n.p,{children:"Below are the most common and useful types of middleware functions used in API design:"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"1-authentication-and-authorization",children:"1. Authentication and Authorization"}),"\n",(0,i.jsxs)(n.p,{children:["Middleware can verify that a request has proper credentials (like a ",(0,i.jsx)(n.a,{href:"https://jwt.io/introduction",children:"JWT"}),") and check if the user has the right permissions."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// authMiddleware.ts\nimport { Request, Response, NextFunction } from 'express';\n\nexport function authMiddleware(req: Request, res: Response, next: NextFunction): void {\n  const token = req.headers['authorization'];\n\n  if (!token || token !== 'Bearer mytoken') {\n    res.status(401).json({ message: 'Unauthorized' });\n    return;\n  }\n\n  // In real-world apps, decode and verify token\n  req.user = { id: '123', role: 'admin' }; // Example\n  next();\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"2-logging",children:"2. Logging"}),"\n",(0,i.jsx)(n.p,{children:"Use logging middleware to monitor incoming requests, which is essential for debugging and analytics.\nIt will helps trace problems and understand API usage patterns."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// logger.ts\nimport { Request, Response, NextFunction } from 'express';\n\nexport function logger(req: Request, res: Response, next: NextFunction): void {\n  console.log(`${new Date().toISOString()} - ${req.method} ${req.originalUrl}`);\n  next();\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"3-input-validation",children:"3. Input Validation"}),"\n",(0,i.jsx)(n.p,{children:"Ensure that incoming data (body, query, headers) is valid before processing it and prevents bad or malicious data from\nreaching your core logic."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// validateUser.ts\nimport { Request, Response, NextFunction } from 'express';\n\nexport function validateUser(req: Request, res: Response, next: NextFunction): void {\n  const { email } = req.body;\n\n  if (!email || !/^\\S+@\\S+\\.\\S+$/.test(email)) {\n    res.status(400).json({ error: 'Invalid email format' });\n    return;\n  }\n\n  next();\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["However, this can be done in other ways like using ",(0,i.jsx)(n.a,{href:"https://zod.dev/",children:"Zod library"})," for TypeScript\nschema declaration and validation."]}),"\n",(0,i.jsxs)(n.p,{children:["Similar to this, there is a built-in feature for python named ",(0,i.jsx)(n.a,{href:"http://docs.python.org/3/library/dataclasses.html",children:"data class"}),"\nwhich has been added in version 3.7 and being used since."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"4-error-handling",children:"4. Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"A centralized place to catch and handle errors throughout your app to Keeps your error responses consistent and\nmanageable."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// errorHandler.ts\nimport { Request, Response, NextFunction } from 'express';\n\nexport function errorHandler(err: Error, req: Request, res: Response, next: NextFunction): void {\n  console.error(err.stack);\n  res.status(500).json({ error: 'Internal Server Error' });\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"5-cors-handling",children:"5. CORS Handling"}),"\n",(0,i.jsx)(n.p,{children:"CORS middleware controls which origins can access your API, typically used when connecting a frontend hosted elsewhere\nwhich Enables safe cross-origin communication with web apps."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// corsMiddleware.ts\nimport { Request, Response, NextFunction } from 'express';\n\nexport function corsMiddleware(req: Request, res: Response, next: NextFunction): void {\n  res.setHeader('Access-Control-Allow-Origin', 'https://example.com');\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n  next();\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"6-rate-limiting",children:"6. Rate Limiting"}),"\n",(0,i.jsx)(n.p,{children:"Rate limiting protects your API from being overwhelmed or abused by limiting the number of requests per client/IP to\ndeters abuse and preserves server performance."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// limiter.ts\nimport rateLimit from 'express-rate-limit';\n\nexport const limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per window\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"best-practices-for-middleware",children:"Best Practices for Middleware"}),"\n",(0,i.jsx)(n.p,{children:"There are series of best practices that can be followed when using/creating middleware for you APIs which are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Keep middleware small and focused on a single task."}),"\n",(0,i.jsx)(n.li,{children:"Always handle errors and edge cases properly."}),"\n",(0,i.jsx)(n.li,{children:"Use external libraries for common tasks like logging or CORS."}),"\n",(0,i.jsx)(n.li,{children:"Apply middleware selectively where needed (global vs route-specific)."}),"\n",(0,i.jsx)(n.li,{children:"Ensure the correct order of middleware \u2014 it affects behavior!"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"summary-table-of-different-type-of-middleware-use-cases",children:"Summary table of different type of Middleware use cases"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Use Case"}),(0,i.jsx)(n.th,{children:"What It Does"}),(0,i.jsx)(n.th,{children:"Benefit"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Authentication"}),(0,i.jsx)(n.td,{children:"Verifies identity"}),(0,i.jsx)(n.td,{children:"Secure endpoints"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Logging"}),(0,i.jsx)(n.td,{children:"Logs method, URL, time"}),(0,i.jsx)(n.td,{children:"Debugging and monitoring"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Input Validation"}),(0,i.jsx)(n.td,{children:"Checks request data"}),(0,i.jsx)(n.td,{children:"Prevent bad input"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Error Handling"}),(0,i.jsx)(n.td,{children:"Catches and handles exceptions"}),(0,i.jsx)(n.td,{children:"Consistent error response"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"CORS Handling"}),(0,i.jsx)(n.td,{children:"Controls allowed origins"}),(0,i.jsx)(n.td,{children:"Enables frontend-backend comms"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Rate Limiting"}),(0,i.jsx)(n.td,{children:"Limits number of client requests"}),(0,i.jsx)(n.td,{children:"Prevents abuse and server overload"})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>d});var s=r(6540);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);